Tutorial: https://www.youtube.com/watch?v=SWYqp7iY_Tc

For the folder with files we want to start a repository on and right click on it, then select "Git Bash Here"

A Git Bash window will open which looks like a command prompt. It will be ready to take commands for the folder desired

The following are command lines that can be ran

git init
	this will initialize the repository for the folder, which allows us to start using git repository commands

touch notes.txt
	this will initialize a file called notes.txt
	doesn't seem to overwrite if the file already exists

git config --global user.name 'Tai Nguyen'
	adds user name to git, likely for logging purposes

git config --global user.email 'tai959328@gmail.com'
	add user email to git, likely for logging purposes

git add notes.txt
	this adds the file to the staging area (aka index), which is the place changed files stay before they are committed locally

git status
	check to see what is in the staging area

git rm --cached notes.txt
	removes notes.txt from the staging area

git add *.txt
	adds any txt files into the staging area

git add .
	adds every file in the folder to the staging area
	if we add files then save updates to those files while they are in the staging area, we'll get notification of changes that
	aren't staged when we check the staging area. Adding the files into the staging area again will stage the latest saved files

git commit -m '<insert change notes here>'
	After commiting the changes we will have cleared the staging area

clear
	clears out the Git Bash console

touch .gitignore
	creates a file called .gitignore
	can have file names and directories added to it to exclude them from staging and commiting
	in this example we created a file called filetoignore.txt and added it into .gitignore
	as can be tested, the filetoignore.txt file is not staged when the "git add ." is used 
	directories can be added in .gitignore file by adding a line with "/<directoryname>
	adding the line "*.txt" .gitignore with  would prevent all txt files from being staged

git branch addingafunctionality
	creates a new branch called addingafunctionality off of the current branch
	the "git status" command will tell us what branch we are in. We should be in the master branch to begin with
	branching is useful when there are multiple devs working on different components/functionality

git checkout addingafunctionality
	brings us to the branch named addingafunctionality
	changes and commits will now only apply to this branch

git checkout master
	brings us to the branch named master
	notice changes and commits (including new files) are not applied to the master branch

git merge addingafunctionality -m 'merging with added functionality'
	this will merge the addingafunctionality branch into the current branch

git remote
	lists the remote repositories we have

git remote add origin https://github.com/tai959328/git_tutorial.git
	adds the remote repository linked in the URL

git push -u origin master
	pushes our commited local repository to the remote one named origin
	login will be required
	once pushed to the remote repository, we can view the repository via https://github.com/tai959328/git_tutorial

touch README.md
	initializes a file called README.md
	md stands for markdown and it helps the readme text display on on the github repository with nice formatting

git push
	pushes our commited local repository to the remote repository (likely to the last remote repository specified) 

git pull
	pulls the remote repository (likely the last one specified) to the local repository

git clone https://github.com/tai959328/git_tutorial.git
	clones the remote repository for git_tutorial on the the current directory of Git Bash